/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package metrics;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JFrame;
import static metrics.util.Get_labelset_x_values;
import static metrics.util.Maxim_key;
import mulan.data.MultiLabelInstances;
import mulan.data.Statistics;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author oscglezm
 */
public class grapchics extends javax.swing.JFrame {
    
    
  ArrayList<MultiLabelInstances> list_datasets;
  DefaultCategoryDataset my_data;
  ArrayList<String> Dataset_names;
  
    public grapchics(ArrayList<MultiLabelInstances> list_datasets , ArrayList<String> Dataset_names) {
        initComponents();
        
        this.Dataset_names = Dataset_names;
        this.list_datasets = list_datasets;
        
        this.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        this.setTitle("Number of Label per examples");
                
        JFreeChart chart1;          
        CategoryPlot plot1;
         my_data = new DefaultCategoryDataset();
        
         chart1 = ChartFactory.createLineChart(" ","# Labels per example", "Relative Frequency ", my_data, PlotOrientation.VERTICAL, true, true, false);
          
          plot1 =  chart1.getCategoryPlot();
          plot1.setRangeGridlinePaint(Color.black);
         
          //para mostrar mini rectangulos
          LineAndShapeRenderer lineandshaperenderer = (LineAndShapeRenderer)plot1.getRenderer();
          lineandshaperenderer.setBaseShapesVisible(true);
        
          ChartPanel cp1 = new ChartPanel(chart1);
                  
         cp1.setPreferredSize(new java.awt.Dimension(600, 500));
        // add it to our application
         
         
         
         graphic_all_dataset(cp1.getChart().getCategoryPlot());
        
        cp1.getChart().getCategoryPlot().setDataset(my_data);      
        this.setBounds(10,10, 600, 500);
        setContentPane(cp1);

        
        
        
    }
    
    
     public void graphic_all_dataset (CategoryPlot cp1)
     {
         atributo[] label_x_frequency ;
         int cant_instancias;
         Statistics stat1 = new Statistics();
         
         MultiLabelInstances current;
         
         for(int i=0; i<list_datasets.size();i++)
         {
             current =list_datasets.get(i);
             label_x_frequency = util.Get_Frequency_x_label(current);
             cant_instancias = current.getNumInstances();
             stat1.calculateStats(current);
             
             update_values_line_chart(label_x_frequency, cant_instancias, cp1, stat1, Dataset_names.get(i));
         
         }
         /*   
         for(MultiLabelInstances current : list_datasets)
         {
             label_x_frequency = util.Get_Frequency_x_label(current);
             cant_instancias = current.getNumInstances();
             stat1.calculateStats(current);
             
             update_values_line_chart(label_x_frequency, cant_instancias, cp1, stat1, current.getDataSet().relationName());
         }
         */
     }
    
    
     public void update_values_line_chart(atributo[] label_x_frequency, int cant_instancias, CategoryPlot cp, Statistics stat1, String name_dataset )
    {            
            double prob;            
            
           HashMap<Integer,Integer> labelset_x_frequency = Get_labelset_x_values(stat1);
           
          
           
           int max = Maxim_key(labelset_x_frequency);
                     
           for(int i=0; i<=max+1 ; i++)
           {
               int freq_current=0;
               if(labelset_x_frequency.get(i)!=null) freq_current=labelset_x_frequency.get(i);
               
               prob= freq_current*1.0/cant_instancias;
               
                
                my_data.setValue(prob , name_dataset,Integer.toString(i));
               
           }         
              
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
